1. The Mathematical Model of Sudoku

a. Grid Structure and Constraints
A Sudoku puzzle is defined on a 9×9 grid, which you can think of as a matrix 
G
G with 81 cells indexed by row 
i
i and column 
j
j (where 
i
,
j
∈
{
1
,
2
,
…
,
9
}
i,j∈{1,2,…,9}). Each cell 
G
(
i
,
j
)
G(i,j) must be assigned an integer between 1 and 9. The puzzle is governed by three main types of constraints:
Row Constraint:
For each row 
i
i, the entries must form a permutation of the set 
{
1
,
2
,
…
,
9
}
{1,2,…,9}. Formally, for any two distinct columns 
j
j and 
k
k in row 
i
i,
G
(
i
,
j
)
≠
G
(
i
,
k
)
G(i,j)

=G(i,k)
Column Constraint:
For each column 
j
j, the entries must also be a permutation of 
{
1
,
2
,
…
,
9
}
{1,2,…,9}. That is, for any two distinct rows 
i
i and 
k
k in column 
j
j,
G
(
i
,
j
)
≠
G
(
k
,
j
)
G(i,j)

=G(k,j)
Sub-grid (Block) Constraint:
The grid is divided into nine 3×3 sub-grids (blocks). Within each block, every digit must appear exactly once. If 
B
B denotes one such block (with cells 
(
i
,
j
)
(i,j) belonging to it), then for any two distinct cells 
(
i
1
,
j
1
)
(i 
1
​	
 ,j 
1
​	
 ) and 
(
i
2
,
j
2
)
(i 
2
​	
 ,j 
2
​	
 ) within 
B
B,
G
(
i
1
,
j
1
)
≠
G
(
i
2
,
j
2
)
G(i 
1
​	
 ,j 
1
​	
 )

=G(i 
2
​	
 ,j 
2
​	
 )
Together, these constraints define a system where every row, column, and block is a complete permutation of the digits 1 to 9.
2. Combinatorial Structure and Counting Valid Sudoku Grids

a. Latin Squares and Additional Constraints
At its heart, a Sudoku solution is an extension of a Latin square—a 9×9 array filled with 9 symbols such that no symbol repeats in any row or column. However, unlike Latin squares, Sudoku introduces an extra layer of structure: the 3×3 sub-grids must also contain each symbol exactly once. This extra block constraint dramatically reduces the number of valid solutions compared to the number of 9×9 Latin squares.
b. Total Count of Valid Sudoku Grids
Mathematicians have rigorously computed the total number of valid Sudoku grids. The result, achieved by Felgenhauer and Jarvis, shows that there are approximately
6.67
×
10
21
6.67×10 
21
 
different valid Sudoku grids. The computation involves:
Counting the number of ways to fill the first block or band (a set of three rows),
Propagating constraints to subsequent rows, columns, and blocks,
Accounting for symmetries and over-counting due to the relabeling of digits.
These combinatorial methods involve advanced techniques in permutation groups and symmetry reduction.
3. Sudoku as a Constraint Satisfaction Problem (CSP)

In the language of CSPs, Sudoku is defined by:
Variables: Each cell 
G
(
i
,
j
)
G(i,j) is a variable with a domain 
{
1
,
2
,
…
,
9
}
{1,2,…,9}.
Constraints: There are three types—row, column, and block—as detailed above.
A solution is an assignment of values to all 81 variables such that all constraints are met. This formulation explains why general-purpose techniques used in CSPs (such as backtracking, forward checking, and constraint propagation) are so effective in solving Sudoku puzzles.
a. Constraint Propagation
Before or during search, constraint propagation helps reduce the domains of variables. For instance, if a particular row already contains the digit 5, then 5 is removed from the candidate values (domain) of all other cells in that row. This basic idea expands into more sophisticated techniques like:
Naked Singles: When a cell’s domain is reduced to a single possibility.
Hidden Singles: When a digit can only fit in one cell within a row, column, or block.
b. Complexity
Solving a Sudoku puzzle has been proven to be NP-complete when generalized to 
n
×
n
n×n grids with appropriate block sizes. Although typical 9×9 puzzles can be solved very efficiently with heuristics and backtracking algorithms, the computational complexity increases dramatically as the grid size grows or additional constraints are added.
4. Mathematical Approach to Puzzle Generation

a. Step 1: Generating a Complete Solution
The first stage in puzzle generation is to generate a fully filled, valid Sudoku grid. This is usually done by:
Recursive Backtracking: An algorithm that assigns values to cells one by one while ensuring that each assignment does not violate any constraints. If a dead-end is reached, the algorithm backtracks and tries a different assignment.
Exact Cover Algorithms: Techniques like Knuth’s Dancing Links (DLX) are also used. Here, the Sudoku puzzle is modeled as an exact cover problem and solved using highly efficient algorithms that systematically cover all constraints.
b. Step 2: Creating the Puzzle by Removing Clues
Once a complete grid is generated, the generator removes numbers (or in our themed version, icons) from the grid:
Uniqueness Requirement: As numbers are removed, the generator must ensure that the resulting puzzle still has a unique solution. This requires re-solving the puzzle after each removal to verify that no alternative completions exist.
Controlled Difficulty: Removing more clues and selecting strategically which ones to remove can control the difficulty of the puzzle. This is often done by applying heuristics that estimate the impact of each removal on the puzzle’s difficulty.
c. Mathematical Considerations in Generation
Symmetry and Isomorphism: Some generators try to maintain certain symmetries (rotational, reflectional, etc.) that make the puzzle visually appealing. In the mathematical sense, puzzles that are isomorphic (i.e., can be transformed into one another by permuting rows/columns or re-labeling digits) are considered equivalent.
Statistical Sampling: Since there is an immense number of valid grids, many generators use random sampling combined with constraint propagation to efficiently generate grids that cover a broad variety of patterns and difficulties.
5. Summary

Constraint Structure: Sudoku puzzles are defined by the strict requirements that each row, column, and 3×3 block contains every number 1–9 exactly once.
Combinatorial Complexity: The total count of valid Sudoku grids is approximately
6.67
×
10
21
6.67×10 
21
 , highlighting the vast combinatorial diversity achievable even within a seemingly simple grid.
CSP Formulation: Treating Sudoku as a constraint satisfaction problem allows the use of powerful algorithmic tools such as backtracking, constraint propagation, and exact cover techniques.
Puzzle Generation: Generating a puzzle involves first creating a complete, valid grid using combinatorial algorithms, then strategically removing entries (while testing for solution uniqueness) to craft a playable puzzle that can be tailored for different difficulty levels.
This mathematical framework not only underpins the process of generating and solving Sudoku puzzles but also provides a rich set of techniques that bridge combinatorics, algorithm design, and computational complexity